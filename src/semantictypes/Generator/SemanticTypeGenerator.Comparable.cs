using System.Collections.Immutable;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Obviously.SemanticTypes.Generator
{
    public partial class SemanticTypeGenerator
    {
        private static Output GenerateComparable(Input input)
        {
            var baseType = BaseList(
                SeparatedList<BaseTypeSyntax>(
                    new SyntaxNodeOrToken[]{
                        SimpleBaseType(
                            GenericName(
                                    Identifier("global::System.IComparable"))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SingletonSeparatedList<TypeSyntax>(
                                            IdentifierName(input.Identifier))))),
                        Token(SyntaxKind.CommaToken),
                        SimpleBaseType(
                            IdentifierName("global::System.IComparable"))}));
            var members = List(
                new MemberDeclarationSyntax[]
                {
                    MethodDeclaration(
                            PredefinedType(
                                Token(SyntaxKind.IntKeyword)),
                            Identifier("CompareTo"))
                        .WithModifiers(
                            TokenList(
                                Token(SyntaxKind.PublicKeyword)))
                        .WithParameterList(
                            ParameterList(
                                SingletonSeparatedList(
                                    Parameter(
                                            Identifier("other"))
                                        .WithType(
                                            NullableType(
                                                IdentifierName(input.Identifier))))))
                        .WithBody(
                            Block(
                                IfStatement(
                                    InvocationExpression(
                                            IdentifierName("ReferenceEquals"))
                                        .WithArgumentList(
                                            ArgumentList(
                                                SeparatedList<ArgumentSyntax>(
                                                    new SyntaxNodeOrToken[]
                                                    {
                                                        Argument(
                                                            ThisExpression()),
                                                        Token(SyntaxKind.CommaToken),
                                                        Argument(
                                                            IdentifierName("other"))
                                                    }))),
                                    ReturnStatement(
                                        LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            Literal(0)))),
                                IfStatement(
                                    IsPatternExpression(
                                        IdentifierName("other"),
                                        ConstantPattern(
                                            LiteralExpression(
                                                SyntaxKind.NullLiteralExpression))),
                                    ReturnStatement(
                                        LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            Literal(1)))),
                                ReturnStatement(
                                    InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("_value"),
                                                IdentifierName("CompareTo")))
                                        .WithArgumentList(
                                            ArgumentList(
                                                SingletonSeparatedList(
                                                    Argument(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("other"),
                                                            IdentifierName("_value"))))))))),
                    MethodDeclaration(
                            PredefinedType(
                                Token(SyntaxKind.IntKeyword)),
                            Identifier("CompareTo"))
                        .WithModifiers(
                            TokenList(
                                Token(SyntaxKind.PublicKeyword)))
                        .WithParameterList(
                            ParameterList(
                                SingletonSeparatedList(
                                    Parameter(
                                            Identifier("obj"))
                                        .WithType(
                                            NullableType(
                                                PredefinedType(
                                                    Token(SyntaxKind.ObjectKeyword)))))))
                        .WithBody(
                            Block(
                                IfStatement(
                                    IsPatternExpression(
                                        IdentifierName("obj"),
                                        ConstantPattern(
                                            LiteralExpression(
                                                SyntaxKind.NullLiteralExpression))),
                                    ReturnStatement(
                                        LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            Literal(1)))),
                                IfStatement(
                                    InvocationExpression(
                                            IdentifierName("ReferenceEquals"))
                                        .WithArgumentList(
                                            ArgumentList(
                                                SeparatedList<ArgumentSyntax>(
                                                    new SyntaxNodeOrToken[]
                                                    {
                                                        Argument(
                                                            ThisExpression()),
                                                        Token(SyntaxKind.CommaToken),
                                                        Argument(
                                                            IdentifierName("obj"))
                                                    }))),
                                    ReturnStatement(
                                        LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            Literal(0)))),
                                ReturnStatement(
                                    ConditionalExpression(
                                        IsPatternExpression(
                                            IdentifierName("obj"),
                                            DeclarationPattern(
                                                IdentifierName(input.Identifier),
                                                SingleVariableDesignation(
                                                    Identifier("other")))),
                                        InvocationExpression(
                                                IdentifierName("CompareTo"))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList(
                                                        Argument(
                                                            IdentifierName("other"))))),
                                        ThrowExpression(
                                            ObjectCreationExpression(
                                                    IdentifierName("global::System.ArgumentException"))
                                                .WithArgumentList(
                                                    ArgumentList(
                                                        SingletonSeparatedList(
                                                            Argument(
                                                                LiteralExpression(
                                                                    SyntaxKind.StringLiteralExpression,
                                                                    Literal(
                                                                        "Object must be of type " + input.Identifier))))))))))),
                    OperatorDeclaration(
                            PredefinedType(
                                Token(SyntaxKind.BoolKeyword)),
                            Token(SyntaxKind.LessThanToken))
                        .WithModifiers(
                            TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword)))
                        .WithParameterList(
                            ParameterList(
                                SeparatedList<ParameterSyntax>(
                                    new SyntaxNodeOrToken[]
                                    {
                                        Parameter(
                                                Identifier("left"))
                                            .WithType(
                                                NullableType(
                                                    IdentifierName(input.Identifier))),
                                        Token(SyntaxKind.CommaToken),
                                        Parameter(
                                                Identifier("right"))
                                            .WithType(
                                                NullableType(
                                                    IdentifierName(input.Identifier)))
                                    })))
                    .WithBody(
                            Block(
                                SingletonList<StatementSyntax>(
                                    ReturnStatement(
                                        BinaryExpression(
                                            SyntaxKind.LessThanExpression,
                                            InvocationExpression(
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            GenericName(
                                                                    Identifier("global::System.Collections.Generic.Comparer"))
                                                                .WithTypeArgumentList(
                                                                    TypeArgumentList(
                                                                        SingletonSeparatedList<TypeSyntax>(
                                                                            IdentifierName(
                                                                                input.Identifier)))),
                                                            IdentifierName("Default")),
                                                        IdentifierName("Compare")))
                                                .WithArgumentList(
                                                    ArgumentList(
                                                        SeparatedList<ArgumentSyntax>(
                                                            new SyntaxNodeOrToken[]
                                                            {
                                                                Argument(IdentifierName("left")),
                                                                Token(SyntaxKind.CommaToken),
                                                                Argument(IdentifierName("right"))
                                                            }))),
                                            LiteralExpression(
                                                SyntaxKind.NumericLiteralExpression,
                                                Literal(0)))))))
                       ,
                    OperatorDeclaration(
                            PredefinedType(
                                Token(SyntaxKind.BoolKeyword)),
                            Token(SyntaxKind.GreaterThanToken))
                        .WithModifiers(
                            TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword)))
                        .WithParameterList(
                            ParameterList(
                                SeparatedList<ParameterSyntax>(
                                    new SyntaxNodeOrToken[]
                                    {
                                        Parameter(
                                                Identifier("left"))
                                            .WithType(
                                                NullableType(
                                                    IdentifierName(input.Identifier))),
                                        Token(SyntaxKind.CommaToken),
                                        Parameter(
                                                Identifier("right"))
                                            .WithType(
                                                NullableType(
                                                    IdentifierName(input.Identifier)))
                                    }))).WithBody(Block(ReturnStatement(
                            LiteralExpression(
                                SyntaxKind.TrueLiteralExpression))))
                    .WithBody(
                        Block(
                            SingletonList<StatementSyntax>(
                                ReturnStatement(
                                    BinaryExpression(
                                        SyntaxKind.GreaterThanExpression,
                                        InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        GenericName(
                                                                Identifier("global::System.Collections.Generic.Comparer"))
                                                            .WithTypeArgumentList(
                                                                TypeArgumentList(
                                                                    SingletonSeparatedList<TypeSyntax>(
                                                                        IdentifierName(
                                                                            input.Identifier)))),
                                                        IdentifierName("Default")),
                                                    IdentifierName("Compare")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SeparatedList<ArgumentSyntax>(
                                                        new SyntaxNodeOrToken[]
                                                        {
                                                            Argument(IdentifierName("left")),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(IdentifierName("right"))
                                                        }))),
                                        LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            Literal(0))))))),
                OperatorDeclaration(
                        PredefinedType(
                            Token(SyntaxKind.BoolKeyword)),
                        Token(SyntaxKind.LessThanEqualsToken))
                    .WithModifiers(
                        TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword)))
                    .WithParameterList(
                        ParameterList(
                            SeparatedList<ParameterSyntax>(
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter(
                                            Identifier("left"))
                                        .WithType(
                                            NullableType(
                                                IdentifierName(input.Identifier))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter(
                                            Identifier("right"))
                                        .WithType(
                                            NullableType(
                                                IdentifierName(input.Identifier)))
                                })))
                    .WithBody(
                        Block(
                            SingletonList<StatementSyntax>(
                                ReturnStatement(
                                    BinaryExpression(
                                        SyntaxKind.LessThanOrEqualExpression,
                                        InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        GenericName(
                                                                Identifier("global::System.Collections.Generic.Comparer"))
                                                            .WithTypeArgumentList(
                                                                TypeArgumentList(
                                                                    SingletonSeparatedList<TypeSyntax>(
                                                                        IdentifierName(
                                                                            input.Identifier)))),
                                                        IdentifierName("Default")),
                                                    IdentifierName("Compare")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SeparatedList<ArgumentSyntax>(
                                                        new SyntaxNodeOrToken[]
                                                        {
                                                            Argument(IdentifierName("left")),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(IdentifierName("right"))
                                                        }))),
                                        LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            Literal(0))))))),
                OperatorDeclaration(
                        PredefinedType(
                            Token(SyntaxKind.BoolKeyword)),
                        Token(SyntaxKind.GreaterThanEqualsToken))
                    .WithModifiers(
                        TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword)))
                    .WithParameterList(
                        ParameterList(
                            SeparatedList<ParameterSyntax>(
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter(
                                            Identifier("left"))
                                        .WithType(
                                            NullableType(
                                                IdentifierName(input.Identifier))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter(
                                            Identifier("right"))
                                        .WithType(
                                            NullableType(
                                                IdentifierName(input.Identifier)))
                                })))
                    .WithBody(
                        Block(
                            SingletonList<StatementSyntax>(
                                ReturnStatement(
                                    BinaryExpression(
                                        SyntaxKind.GreaterThanOrEqualExpression,
                                        InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        GenericName(
                                                                Identifier("global::System.Collections.Generic.Comparer"))
                                                            .WithTypeArgumentList(
                                                                TypeArgumentList(
                                                                    SingletonSeparatedList<TypeSyntax>(
                                                                        IdentifierName(
                                                                            input.Identifier)))),
                                                        IdentifierName("Default")),
                                                    IdentifierName("Compare")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SeparatedList<ArgumentSyntax>(
                                                        new SyntaxNodeOrToken[]
                                                        {
                                                            Argument(IdentifierName("left")),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(IdentifierName("right"))
                                                        }))),
                                        LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            Literal(0)))))))
                });

			return new Output(baseType, ImmutableList.CreateRange(members));
        }
    }
}
